// Action bar tip: dsv+TAB
/**
 * Format current buffer - the column space is leftcaretParm.
 *
 * This macro makes it easy to deal with dsv data in a way where the overview has the properties of
 * presentation in datasheet view or other clearly columned view
 * By presenting dsv data in a column ligned up way, pure textual editing can combined with overview.
 *
 * When editing such presented dsv data, it could be a mess to keeping up columns manually. With this macro,
 * the only thing to remember is keeping a constant number of separators. In other words, don't care about  
 * changing lignupness rigth to editing. Final or during editing this macro is invoked to lign up columns.
 *
 * This facilty is meant to deal with blocks of dsv data as tables, a sort of pure text database in a single file.
 */
void formatDSV() {
	dsvFormatBlocks(numLeft2Caret(textArea,true,1));
}

/** 
 * Formats delimiter seperated values block to lign up columns. All blocks in current buffer is column ligned up
 * formatted with the sammme columnspace - the parameter to dsvFormat, but coulumns width is individual to each block. 
 * 
 * A block is surrounded between following start and end pattern, hvor ',' and 'foo' is any repspective single
 * char and string
 *
 * 		/***,sv,foo
 * 		blockline1
 *		blockline2
 *		...
 *		blockline n
 *		***/
 /**
 * Each blockline has delimiter seperated values - the text quantifier double quotes and infields  
 * double quotes escaping as double quotes double quotes is allowed but values can not contain lineshifts
 *
 * @param columnSpace the space between columns
 * @library textAreaBlocksRanges
 * @library Beam
 */
void dsvFormatBlocks(int columnSpace) {
	for (List block : textAreaBlocksRanges(textArea, "/\\*\\*\\*.sv.+", "\\*\\*\\*/")) {
		String delim = textArea.getLineText(block.get(0)-1).replaceAll("^/\\*\\*\\*(.)sv.*","$1");
		int[] maxLengths = new int[textArea.getLineText(block.get(0)).split(delim).length()];
		
		List eBlock = Beam(block)
			.map(delim,textArea,maxLengths,"item->{ "+
				"String[] items= arg2.getLineText(item).split(arg1+´(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)´);"+
				"for (int i=0; i < items.length; i++) {"+
					"items[i]=items[i].trim();"+
					"if (items[i].length() > arg3[i])"+
						"arg3[i] = items[i].length();"+
				"}"+
				"return items;}")
			.toList();
		
		int getIx=0;
		for (int taLine : block) {
			String[] items=eBlock.get(getIx++);
			String joined="";
			for (int i=0; i<items.length; i++) 
				joined += (i>0 ? delim : "")+items[i]+ ( i < items.length-1 
					? new String(new char[columnSpace+maxLengths[i]-items[i].length()]).replace('\0',' ')
					: "");
			textArea.setCaretPosition(textArea.getLineStartOffset(taLine));
			textArea.selectLine();
			textArea.setSelectedText(joined);
		}
	}
}
formatDSV();
