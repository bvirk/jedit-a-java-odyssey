// da-key tip: S+Backspace
// EDIT BELOW FOR FILE MODE CONTEXT DECIDED MENU ITEMS
/*//
label02.*.<html><br></html>=label
label10.bsh.<html><b><u>Beanshell</u></b></html>=label
label11.bsh._execute=runBsh
label19.bsh.<html><br></html>=label
label20.java.xml.props.<html><b><u>Ant Targets<u></b></html>=label
label21.java.xml.props.clea_n=runAnt
label22.java.xml.props._compile=runAnt
label23.java.xml.props._jar=runAnt
label24.java.xml.props._run=runAnt
label25.java.xml.props._doc=runAnt
label31.java.xml.props.bsh.<html><b>Print urgency</b></html>=label
label33.java.xml.props.bsh._1Debug=setUrgency
label34.java.xml.props.bsh._3Message=setUrgency
label35.java.xml.props.bsh._5Notice=setUrgency
label36.java.xml.props.bsh._7Warning=setUrgency
label36.java.xml.props.bsh._9Error=setUrgency
label40.js.<html><b><u>Node_js<u></b></html>=label
label41.js.r_un=runNode
label50.c.cpp.<html><b><u>Make<u></b></html>=label
label51.c.cpp.r_un=runMake
label60.py.<html><b><u>Python<u></b></html>=label
label61.py.p_ython=runPython
label70.php.<html><b><u>Php<u></b></html>=label
label71.php._php=runPhp
action.anttarget.latest=${jedit.options.actionthatbuffer}
*///
/**
 * File associated actions dialog with invocation by shortcut key.
 * 
 * The shortcut key is remembered and might on next opening of the dialog be
 * default action which can be chosen by return key og space key.
 * 
 * The properties list above desides the dialog labels. Labels are shown if current
 * buffer's file suffix is one of the dot delimited words between 'labelxx' and
 * last word in a property key. That last word is the label text. character '*'
 * means any file.
 * 
 * Command(s) are grouped with a headerline - when disabling all commands in group,
 * the header should also be disabled. Disabling can be done be just removing
 * leadning 'l' in 'label' Leading underscore desides key for invoking action.
 * 
 * Only one global key is persistent, which means that every action must own a key.
 * In 'labelxx' xx is only used as sorting order. 
 *
 * The Print urgency targets debug printing from plugins, but because developing
 * and testing java often happens with a .bsh file in current buffer it is
 * convenient to have these menues associated with .bsh too.
 *
 * @see UniProp(String fileName,String startPattern,String endPattern)
 *
 * @library UniProp
 * @library antTask 
 * @library runNode
 */
void actionsDlg(String suffix) {
	void command(String ch) {
		if (ch.length() > 0)
			up.setProperty(keyLatestActionLetter,""+ch);
	switch (cmds.get(up.getProperty(keyLatestActionLetter))) {
			case "runAnt":
				antTask(parm.get(up.getProperty(keyLatestActionLetter)),view,buffer);
				break;
			case "runBsh":
				Macros.runScript(view,buffer.getPath(),true);
				view.goToBuffer(buffer);
				break;
			case "runNode":
				runNode(view,buffer);
				break;
			case "runPhp":
				runPhp(view,buffer);
				break;
			case "runPython":
			    //runPython(view,buffer);
			    String pyScript=buffer.getPath();
			    runInConsoleSystem("python3 "+pyScript+ " "+jEdit.getProperty("options.python.runargs"),view,buffer,true);
				break;
			case "runMake":
			    runInConsoleSystem("make && make run",view,buffer,true);
			    break;
			case "setUrgency":
			    jEdit.getPlugin("home.txtconv.TxtConvPlugin",true).setPrintUrgency(
					Integer.parseInt(parm.get(up.getProperty(keyLatestActionLetter)).substring(0,1)));
				break;
			default:
				Macros.message(view,"uknown command: "+cmds.get(up.getProperty(keyLatestActionLetter)));
		}
	}
	XThis MenuesObj(List menues,String sCKeys, int defaultIndex) {
		int ix;
		String heading() { return null; }
		String shCKeys() { return sCKeys; } 
		String readLabelText() {
			return ix < menues.size()
				? menues.get(ix++)
				: null;
		}
		int defIndex() { return defaultIndex; }
		String menuItem(int index) {
			return ""+sCKeys.charAt(index);
		}
		return this;
	}
	void buildMenues() {
		List matKeys=up.matchingSortedKeys("label\\d\\d\\.(\\w+\\.)*("+suffix+"\\.|\\*\\.).+");
		for (String s:matKeys) 
			if (up.getProperty(s).equals("label"))
				menuItems.add(s.replaceAll(".*\\.(.+)","$1"));
			else {
				menuItems.add(s.replaceAll(".*\\.(\\w*)_(\\w)(.*)","$1<u>$2</u>$3").replaceAll("(.+)","<html>$1</html>"));
				String us = s.replaceAll(".*_(\\w).*","$1");
				sCKeys += us;
				parm.put(us,s.replaceAll("^label\\d\\d.+\\.","").replaceAll("_","")); 
				cmds.put(us,up.getProperty(s));
				if (us.equals(up.getProperty(keyLatestActionLetter))) 
					defActionIx = menuItems.size()-1;
			}
	}
	up=UniProp(scriptPath,"/*//","*///");
	List menuItems = new ArrayList();
	HashMap cmds = new HashMap();
	HashMap parm = new HashMap();
	String sCKeys="";
	int defActionIx=-2;
	final String keyLatestActionLetter = "action.anttarget.latest";
	buildMenues();
	actionsDialog(this,MenuesObj(menuItems,sCKeys,defActionIx),view);
}

actionsDlg(buffer.getName().replaceAll(".+\\.",""));