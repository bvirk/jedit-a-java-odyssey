/**
 * Inserts appropriately indented javadoc comment when caret is placed straight before first word in line. 
 * Things like methods, with, in regex lingo, '\(.*\)' inside, is interpreted with potentially @param's and 
 * subsequent @return if method seems to be a non constructer or not with return type void.
 */
void insertDoc() {
	String preStr="";
	int finalUp=3;
	int caretPos = textArea.getCaretPosition();
	for (int i=buffer.getLineEndOffset(textArea.getCaretLine()-1) ; i < caretPos;i++)
		preStr += (buffer.getText(i,1).getBytes()[0]==9) ? "    " : " ";
	String docStars = preStr+"/**\n"+preStr+" *\n"+preStr+" *\n";
	
	textArea.goToEndOfWhiteSpace(true);
	String str =textArea.getSelectedText();
	textArea.setCaretPosition(caretPos,true);
	
	if (str.indexOf("(") != -1) {
		String args = (str.replaceAll("^[^\\(]+\\(([^\\)]*)\\).*$","$1"));
		String[] begEnd = str.split("\\("+args+"\\)");
		
		if (args.length() > 0) 
			for (ta:args.trim().split(",")) {
				docStars += preStr+ " * @param "+ta.trim().split(" ")[1]+"\n";
				finalUp++;
			}
		String[] beg= begEnd[0].trim().replaceAll("\\s+"," ").split(" ");
		
		if (beg.length  > 1) {
			String retType = beg[beg.length-2].trim();
			if (!retType.equals("void") && !retType.equals("private") && !retType.equals("public")) {
				docStars += preStr+ " * @return \n";
				finalUp++;
			}
		}
	}
	docStars += preStr + " */\n";
	buffer.insert(buffer.getLineEndOffset(textArea.getCaretLine()-1),docStars);
	textArea.setCaretPosition(buffer.getLineStartOffset(textArea.getCaretLine()-finalUp));
	textArea.goToEndOfLine(false);
	buffer.insert(textArea.getCaretPosition(), " ");
}
insertDoc();