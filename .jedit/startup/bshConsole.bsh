/* :tabSize=4:indentSize=4:noTabs=false:
 * :folding=explicit:collapseFolds=1: 
 * The folding style is important for lookup facility of macro startup */ 

import org.gjt.sp.jedit.bsh.XThis; 

/** 
 * Printing to dockable window of Beanshell shell of Plugin Console. 
 */

//{{{JComponent dockableW()
DockableWindowManager dockableWindowManager;
/**
 *	
 *
 * @return JComponent console dockableWindow
 */
JComponent consoleDW() {
	final String plName="console"; 
	if (null==super.dockableWindowManager)
		super.dockableWindowManager = jEdit.getActiveView().getDockableWindowManager();
	JComponent dAW = super.dockableWindowManager.getDockableWindow(plName);
	if (null == dAW) {
		super.dockableWindowManager.addDockableWindow(plName);
		dAW = super.dockableWindowManager.getDockableWindow(plName);
	}
	return dAW;
} //}}}

//{{{ void println(Object thing)
/**
 *  Print a line on plugin console's beanshell shell
 *
 * @param thing to print at a line
 */ 
void println(Object thing) {
	if (null==super.dockableWindowManager)
		super.dockableWindowManager = jEdit.getActiveView().getDockableWindowManager();
	while (!(dockableWindowManager.isDockableWindowVisible("console") && consoleDW().getShell().getName().equals("BeanShell"))) {
		new console.Shell.SwitchAction("BeanShell").invoke(jEdit.getActiveView());
	}
	consoleDW().getOutput().print(Color.black,""+thing);
} //}}}

//{{{ void p(Object thing)
/**
 * Print things on plugin console's beanshell shell, showing the decomposition using curly braces
 *
 * @param thing to print at a line
 */ 
void p(Object thing) {
	if (thing == null)
		println("null");
	else if (thing.getClass().isArray() || thing instanceof AbstractCollection )
		p(thing,spacer());
	else
		println(thing);
} //}}}

//{{{ XThis spacer()
/**
 * Used in the two p(...) methods to indent content as function a level of recursion  
 *
 * @return object with methods for indenting lines
 */
XThis spacer() {
	String apply(String line) {
		return prefix+line;
	}
	String apply(String line, boolean applyAfter) {
		if (applyAfter) {
			line  = prefix+line;
			prefix += "    ";
		} else 
			line = (prefix = prefix.substring(4))+line;
		return line;
	}
	String prefix="";
	return this;
} //}}}

//{{{ void p(Object thing,Object spacer)
/**
 * Print things on plugin console's beanshell shell, showing things decomposition using curly braces
 * This function is mainly thought of being used by p(thing)
 *
 * @param thing to be printed
 * @param spacer to control indention of recursion
 */
void p(Object thing,Object spacer) {
	if (thing.getClass().isArray() || thing instanceof AbstractCollection ) {
		println(spacer.apply("{"+thing.getClass().getName(),true));
		for (Object line : thing)
			p(line == null ? "null" : line,spacer);
		println(spacer.apply("}",false));
	} else 
		println(spacer.apply(""+thing));
} //}}}

//{{{ void pt(Object thing)
/**
 * Print things, timestamp prefixed, on plugin console's beanshell shell
 *
 * @param thing to be printet
 */ 
void pt(Object thing) {
	println(java.time.LocalTime.now().format(java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss,SSS ")).toString()+thing);
} //}}}

//{{{ void cls() 
/**
 * Clears 'the screen' which is plugin console's beanshell shell.
 */ 
void cls() { 
	consoleDW().clear(); 
} //}}}

//{{{ void cls(heading) 
/**
 * Clears 'the screen' which is plugin console's beanshell shell and 'prints' a headline
 * Often used as cls(0), which is a convenient workaround for timestamp with millisecond resolution. 
 *
 * Due to that the thread that repaint content af Jtextarea not get thread of execution before invoked beanshell 
 * functionality is finished, progress of running might not be visual detectable as latest result. If things have
 * runned and output 'seems untouched' it is not possible to distinct visual between nothing have runned or invoked
 * script have runned with same output.
 * 
 * A change in headline ensures that things had runned.
 *
 * @param thing to printed as headline
 */ 
void cls(Object thing) { 
	consoleDW().clear();
	if (thing instanceof Integer && thing == 0)
		println(java.time.LocalTime.now().format(java.time.format.DateTimeFormatter.ofPattern("K:mm:ss a,SSS ")).toString());
	else
		println(""+thing);
} //}}}
