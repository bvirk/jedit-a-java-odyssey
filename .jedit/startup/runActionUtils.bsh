/* :tabSize=4:indentSize=4:noTabs=false:
 * :folding=explicit:collapseFolds=1: 
The folding style is important for lookup facility of macro startup */

import org.gjt.sp.jedit.bsh.XThis;

/**
 * Utilities for macros actionsDialog, cyberkiss and startup
 */
 
//{{{ void antTask(String task)
/**
 * Runs ant target for that build.xml file being in current directory for Console's System shell or above.
 * A macro - 'cd current' swiches to that of current buffer.
 *
 * @param target
 * @param view
 * @param buffer
 */
void antTask(String target,View view,Buffer buffer) {
	jEdit.saveAllBuffers(view);
	new console.Shell.SwitchAction("System").invoke(jEdit.getActiveView());
	wd=wdFirst=ux(jEdit.getPlugin("console.ConsolePlugin",true).getSystemShellVariableValue(view,"PWD")).replaceAll("/$","");
	while (!new File(wd+"/build.xml").exists() && wd.length()>0)  
		wd = wd.replaceAll("/[^/]+$","");
	if (!wd.equals(wdFirst) && wd.length() > 0)
		runCommandInConsole(view,"System","cd "+wd);
	runCommandInConsole(view,"System","ant common."+target);
	view.goToBuffer(buffer);
} //}}}       

//{{{ void runNode(view,buffer)
/**
 * Runs Node.js against current buffer. 
 *
 * @param view
 * @param buffer
 */
void runNode(View view,Buffer buffer) {
	jEdit.saveAllBuffers(view);	
	runCommandInConsole(view,"System","node "+buffer.getPath());
	view.goToBuffer(buffer);
} //}}}

//{{{ void actionsDialog(XThis callBack, XThis menuSeq, View view)
/**
 * JLabels grid to recieve key character invoked choice. Used by macro actionsDialog and cyberkiss
 *
 * @param callBack for return choice to caller from within keyTyped handler 
 * @param menuSeq to read labels, shortcut keys and default actions from. 
 * @param view containing component
 */
void actionsDialog(XThis callBack, XThis menuSeq, View view) {
	void addLabels() {
		buttonPanel.add(new JLabel("<html>(Esc to leave)</html>"));
		if (null != headLine) {
			buttonPanel.add(new JLabel("<html><b>"+headLine+"</b></html>"));
			buttonPanel.add(new JLabel("<html><br></html>"));
		}
		
		while ((labelText=menuSeq.readLabelText()) != null) {
			menuSize++;
			JLabel j = new JLabel(labelText);
			if (menuSeq.defIndex() == menuSize-1) {
				j.setBackground(Color.lightGray);
				j.setOpaque(true);
			}
			buttonPanel.add(j);
		}
	}
	dialog = new JDialog(view,true); //, title, false);
	dialog.setUndecorated(true);
    content = new JPanel(new BorderLayout());
    dialog.setContentPane(content);
    dialog.addKeyListener(this);
    buttonPanel = new JPanel();
	int menuSize;
    String headLine = menuSeq.heading();
	addLabels();
    buttonPanel.setLayout(new GridLayout(menuSize+1+(null != headLine ? 2 : 0),1));
	content.add(buttonPanel, "South");
	dialog.pack();
    dialog.setLocationRelativeTo(view);
    dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
    public void keyTyped(KeyEvent e) {
    	char c = e.getKeyChar();
    	if (((byte)c)==27) 
    		dialog.dispose();
    	int indexOfKeyTyped = menuSeq.shCKeys().indexOf(c);
    	if (indexOfKeyTyped > -1 || (menuSeq.defIndex() >= 0 && ( c ==' ' || c == '\n'))) {
    		dialog.dispose();
    		callBack.command((c != ' ' && c != '\n')
    			? menuSeq.menuItem(indexOfKeyTyped)
    			: "");
    	}
    }
    public void keyPressed(KeyEvent e) {}
    public void keyReleased(KeyEvent e) {}
    dialog.setVisible(true);
} //}}}

//{{{ XThis NumSeq(List menues,String headLine)
/**
 * Skeleton for a parameter object to actionsDialog. This example shows how NumSeq is used.
 *
 *  void actionsDialogExample() {
 *  	command(String chosen) {
 *  		p(chosen);
 *  	}
 *  	actionsDialog(this,NumSeq(Arrays.asList(new String[]{
 *  		 "abra"
 *  		,"kadabra"
 *  		,"pif"
 *  		,"paf"
 *  		,"puf"
 *  		}),"print me"),view);
 *  }
 * 
 * As an example of the flexibility it gives to have some part of actionsDialog's functionality parameterized, 
 * look at how actionsDialog is used in macro actionsDialog contra in macro Java/cyberkiss
 *
 * @param menues is a List of strings that becomes the shorcut key profixed choices to chose among
 * @param headline shows a context at top as a reminder/check about what the choices has relevance for.
 * @return XThis object with methods to retrieve headings, shortcut keys, label text and menues. 
 */
XThis NumSeq(List menues,String headLine) {
	int ix;
	String sCKeys="";
	String heading() { return headLine; }
	String shCKeys() { return sCKeys; } 
	String readLabelText() {
		if (ix == menues.size())
			return null;
		String sC=Character.toString((char)(ix+49+(ix>8 ? 39 : 0)));
		sCKeys += sC;
		return "<html><u>"+ sC +"</u> "+menues.get(ix++)+"</html>";
	}
	int defIndex() { return -2; }
	String menuItem(int index) {
		return menues.get(index);
	}
	return this;
}
//}}}